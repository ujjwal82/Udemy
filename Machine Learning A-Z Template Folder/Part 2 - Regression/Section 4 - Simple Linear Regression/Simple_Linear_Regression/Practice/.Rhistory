install.packages('RJDBC')
q()
setwd("D:/ujjwal/Tutorial/Udemy/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/Data_Preprocessing/Practice")
dataset
view(dataset)
View(dataset)
setwd("D:/ujjwal/Tutorial/Udemy/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/Data_Preprocessing/Practice")
View(dataset)
dataset
View(dataset)
View(dataset)
print(dataset)
dataset <- read.csv('Data.csv');
head(dataset)
dataset = read.csv('Data.csv');
head(dataset)
library("class", lib.loc="C:/Program Files/R/R-3.2.0/library")
library("datasets", lib.loc="C:/Program Files/R/R-3.2.0/library")
setwd("D:/ujjwal/Tutorial/Udemy/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/Data_Preprocessing/Practice")
View(dataset)
View(dataset)
View(dataset)
X = dataset[,1]
X
View(dataset)
dataset$Age = ifelse(is.na(dataset$Age)
, ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE))
, dataset$Age)
dataset
dataset$Age = ifelse(is.na(dataset$Age)
, ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE))
, dataset$Age)
View(dataset)
dataset$Salary = ifelse(is.na(dataset$Salary)
, ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE))
, dataset$Salary)
View(dataset)
dataset$Country = factor(dataset$Country
, levels = c('France', 'Germany', 'Spain')
, labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased
, levels = c('Yes', 'No')
, labels = c(1,2))
dataset$Country = factor(dataset$Country
, levels = c('France', 'Germany', 'Spain')
, labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased
, levels = c('Yes', 'No')
, labels = c(1,0))
dataset = read.csv('Data.csv');
# Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age)
, ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE))
, dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary)
, ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE))
, dataset$Salary)
# Encoding categorical data
dataset$Country = factor(dataset$Country
, levels = c('France', 'Germany', 'Spain')
, labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased
, levels = c('Yes', 'No')
, labels = c(1,0))
install.packages("caTool")
install.packages("caTools")
library("caTools", lib.loc="~/R/win-library/3.2")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio=0.8)
split
training_set = subset(dataset, split == TRUE)
training_set
split
split == TRUE
test_set = subset(dataset, split == FALSE)
test_set
training_set
training_set = scale(training_set)
test_set = scale(test_set)
dataset = read.csv('Data.csv');
# Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age)
, ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE))
, dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary)
, ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE))
, dataset$Salary)
# Encoding categorical data
dataset$Country = factor(dataset$Country
, levels = c('France', 'Germany', 'Spain')
, labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased
, levels = c('Yes', 'No')
, labels = c(1,0))
# Splitting the dataset into train set and test set
#install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio=0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature scaling
training_set = scale(training_set)
test_set = scale(test_set)
test_set
training_set
training_set[,2:3] = scale(training_set[,2:3])
test_set[,2:3] = scale(test_set[,2:3])
training_set
test_set
training_set[,2:3] = scale(training_set[,2:3])
source('D:/ujjwal/Tutorial/Udemy/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/Data_Preprocessing/Practice/data_preprocessing_template.R')
View(training_set)
View(test_set)
source('D:/ujjwal/Tutorial/Udemy/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/Data_Preprocessing/Practice/data_preprocessing_template.R')
source('D:/ujjwal/Tutorial/Udemy/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/Data_Preprocessing/Practice/data_preprocessing_template.R')
dataset = read.csv('Data.csv');
dataset = dataset[,1:3]
dataset
dataset = read.csv('Data.csv');
dataset = dataset[,1:4]
dataset = read.csv('Data.csv');
dataset = dataset[,1:4]
dataset
source('D:/ujjwal/Tutorial/Udemy/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/Data_Preprocessing/Practice/data_preprocessing_template.R')
View(test_set)
View(test_set)
View(training_set)
setwd("D:/ujjwal/Tutorial/Udemy/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 4 - Simple Linear Regression/Simple_Linear_Regression/Practice")
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
View(dataset)
dataset = read.csv('Salary_Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(test_set)
View(training_set)
View(test_set)
View(training_set)
regressor = lm(formula = Salary ~ YearsExperience
, data = training_set)
dataset = read.csv('Salary_Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Simple Linear Regression to the training set
regressor = lm(formula = Salary ~ YearsExperience
, data = training_set)
summary(regressor)
y_pred = predict(regressor, newdata = test_set)
y_pre
y_pred
test_set
test_set, y_pred
head(test_set, y_pred)
install.packages('ggplot2')
